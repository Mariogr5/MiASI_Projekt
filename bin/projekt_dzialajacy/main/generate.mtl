[module generate('http://www.eclipse.org/uml2/5.0.0/UML')]

[query public toScreamingSnakeCase(input : String) : String =
	if (input.trim() = '') then
        ''
    else
        let cleanedInput : String = input.trim()
			.replaceAll(' {1,}', '_')
			.replaceAll('_{2,}', '_') in
        let words : Sequence(String) = 
            if (cleanedInput.contains('_')) then
                cleanedInput.tokenize('_')->select(w | w <> '')
            else
                cleanedInput->collect(c | 
                    if (c.toString().toUpperCase() = c.toString() and c.toString().matches('[A-Z]')) then
                        '_' + c.toString()
                    else
                        c.toString()
                    endif
                )->toString().replaceAll('([a-z])([A-Z])', '$1_$2').tokenize('_')->select(w | w <> '')
            endif
        in
        if (words->isEmpty()) then
            ''
        else
            words->collect(w | w.toUpperCase())->sep('_')
        endif
    endif	
/]

[query public toCamelCase(input : String) : String =
	if (input.trim() = '') then
		''
	else
		let cleanedInput : String = input.trim()
			.replaceAll(' {1,}', '_')
			.replaceAll('_{2,}', '_')
		in
		let words : Sequence(String) = cleanedInput
			.tokenize('_')
			->select(w | not w.oclIsUndefined() and w.trim() <> '')
		in
		if (words->size() = 0) then
			''
		else if (words->size() = 1) then
			words->first().toLower()
		else
			let firstWord : String = words->first().toLower() in
			let otherWords : Sequence(String) = words->subSequence(2, words->size()) in
			firstWord +
			otherWords->collect(word |
				if (word.size() = 0) then
					''
				else if (word.size() = 1) then
					word.toUpperCase()
				else
					word.substring(1,1).toUpperCase() +
					word.substring(2, word.size()).toLower()
				endif endif
			)->iterate(word; result : String = '' | result + word)
		endif endif
	endif
/]

[query public parseExpression(expr : OpaqueExpression) : Sequence(String) =
	if (expr._body->first().trim() = '') then
        Sequence{}
	else
	    let cleanedExpr : String = expr._body->first().trim() in
	    let operators : Sequence(String) = Sequence{'==', '!=', '>=', '<=', '>', '<'} in
	    let matchedOperator : String = operators->select(op | cleanedExpr.contains(op))->first() in
	    if (matchedOperator <> null and cleanedExpr.tokenize(matchedOperator)->size() = 2) then
	        let parts : Sequence(String) = cleanedExpr.tokenize(matchedOperator) in
	        let param : String = parts->first().trim() in
	        let val : String = parts->at(2).trim() in
	        if (param <> '' and val <> '') then
	            Sequence{param, matchedOperator, val}
	        else
	            Sequence{}
	        endif
	    else
	        Sequence{}
	    endif
	endif
/]

[query public asCppType(input: String) : String =
	if (input.trim() = '') then
		''
	else
		let cleanedInput : String = input.trim() in
		if cleanedInput.toLower() = 'true' or cleanedInput.toLower() = 'false' then
			'bool'
		else
			if cleanedInput.matches('^[+-]?\\d+$') then
		    	'int'
			else 
				if cleanedInput.matches('^[+-]?(?:\\d*\\.\\d+|\\d+\\.\\d*)(?:[eE][+-]?\\d+)?$') then
		    		'float'
				else
					'std::string'
				endif
			endif
		endif
	endif
/]

[comment @main/]
[template public generateElement(stateMachine : StateMachine)]

[comment @main/]
[file ('State.hpp', false, 'UTF-8')]
#pragma once
#include <memory>

class State {
public:
    virtual ~State() = default;
    virtual void enter(Context& context) = 0;
    virtual void doActivity(Context& context) = 0;
    virtual void exit(Context& context) = 0;
    virtual const char* name() const = 0;
};
[/file]

[comment @main/]
[file ('Event.hpp', false, 'UTF-8')]
#pragma once

public enum class Event {
	NONE_EVENT,
	[for (event: Event | Model.allInstances()->collect(e | e.packagedElement)->flatten()
		->filter(uml::Event)->select(e | e.name <> '')
	)]
	[event.eClass().name.toScreamingSnakeCase()/]_[event.name.toScreamingSnakeCase()/],
	[/for]
};

[/file]

[comment @main/]
[file ('Context.hpp', false, 'UTF-8')]
#pragma once
#include <string>

[let expressions : Sequence(OpaqueExpression) = stateMachine.region->collect(r | r.transition)->flatten()
		->collect(t | t.ownedRule)->flatten()->collect(c | c.specification)->flatten()
		->filter(OpaqueExpression)->flatten()->asSequence()
]
[if (expressions->select(e | e.parseExpression()->size() = 3)->size() = 0)]
class Context;
[else]
class Context {
public:
	[let validNames : OrderedSet(String) = expressions
		->select(e | e.parseExpression()->at(3).asCppType() <> '')
		->collect(e | e.parseExpression()->at(1).toCamelCase())->asOrderedSet()
	]
	[for (name : String | validNames)]
	[let matchingExpr : OpaqueExpression = expressions
		-> select(e | e.parseExpression()->at(3).asCppType() <> '' and e.parseExpression()->at(1).toCamelCase() = name)
		->first()
	]
	[matchingExpr.parseExpression()->at(3).asCppType()/] [name/];
	[/let]
	[/for]
	// You can declare rest important attributes and methods here.
	[/let]
}
[/if]
[/let]
[/file]

[comment @main/]
[file ('Transition.hpp', false, 'UTF-8')]
#pragma once
#include "Context.hpp"
#include "Event.hpp"
#include "State.hpp"

class Transition {
public:
	State *from;
	State *to;
	Event trigger;
	bool (*guard)(Context&);
	void (*activity)(Context&);
	
	~Transition() = default;
	Transition(State *_from, State *_to, Event _trigger = Event::NONE_EVENT, bool (*_guard)(Context&) = nullptr), void (*_activity(Context&) = nullptr
        : from(_from), to(_to), trigger(_trigger), guard(_guard), activity(_activity) {}
};
[/file]

[comment @main/]
[file ('Guard.hpp', false, 'UTF-8')]
#include "Context.hpp"

namespace Guard {
	[for (constraint : Constraint | stateMachine.region->collect(r | r.transition)->flatten()
    	->collect(t | t.ownedRule)->flatten()
	)]
	[let parts: Sequence(String) = constraint->collect(c | c.specification)->flatten()
		->filter(OpaqueExpression)->asSequence()->first().parseExpression()
	]
	[if (parts->size() > 1)]
	bool [constraint.name.toCamelCase()/](Context& ctx) { return ctx.[Sequence{parts->at(1).toCamelCase(), parts->at(2), parts->at(3)}->sep(' ')/]; }
	[/if]
	[/let]
	[/for]
};

[/file]

[for (state : State | stateMachine.region->collect(r | r.subvertex)->flatten()->filter(uml::State))]

[comment @main/]
[file (state.name.toCamelCase().toUpperFirst().concat('.hpp'), false, 'UTF-8')]
#pragma once
#include "State.hpp"
#include "Context.hpp"

[if (not state.ownedComment->isEmpty())]
// [state.ownedComment->asSequence()->first()._body/]
[/if]
class [state.name.toCamelCase().toUpperFirst()/] : public State {
public:
    void enter(Context& ctx) override;
    void doActivity(Context& ctx) override;
    void exit(Context& ctx) override;
    const char* name() const override;
};
[/file]

[comment @main/]
[file (state.name.toCamelCase().toUpperFirst().concat('.cpp'), false, 'UTF-8')]
#include "[state.name.toCamelCase().toUpperFirst()/].hpp"
#include <iostream>

[if (not state.entry->isEmpty() and not state.entry.name.oclIsUndefined())]
void [state.name.toCamelCase().toUpperFirst()/]::enter(Context& context) {
	std::cout << "Entering state: " << name() << std::endl;
    // Your code for [state.entry.name.toScreamingSnakeCase()/] goes here.
}
[else]
void [state.name.toCamelCase().toUpperFirst()/]::enter(Context& context) { return; }
[/if]

[if (not state.doActivity->isEmpty() and not state.doActivity.name.oclIsUndefined())]
void [state.name.toCamelCase().toUpperFirst()/]::doActivity(Context& context) {
	std::cout << "Executing activity in state: " << name() << std::endl;
    // Your code for [state.doActivity.name.toScreamingSnakeCase()/] goes here.
}
[else]
void [state.name.toCamelCase().toUpperFirst()/]::doActivity(Context& context) { return; }
[/if]

[if (not state.exit->isEmpty() and not state.exit.name.oclIsUndefined())]
void [state.name/]::exit(Context& context) {
	std::cout << "Exiting state: " << name() << std::endl;
    // Your code for [state.exit.name.toScreamingSnakeCase()/] goes here.
}
[else]
void [state.name.toCamelCase().toUpperFirst()/]::exit(Context& context) { return; }
[/if]

const char* [state.name.toCamelCase().toUpperFirst()/]::name() const {
    return "[state.name/]";
}

[/file]

[/for]

[/template]
